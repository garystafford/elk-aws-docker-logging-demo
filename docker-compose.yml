# ELK Demo Docker service stack
# Maintainer: Gary A. Stafford <garystafford@rochester.rr.com>

version: '3.1'
services:
  elk:
    image: garystafford/custom-elk:latest
    networks:
    - elk-demo
    ports:
    - "5601:5601/tcp"   # Kibana web interface
    - "9200:9200/tcp"   # Elasticsearch JSON interface
    - "5044:5044/tcp"   # Logstash Beats (not used)
    - "5000:5000/udp"   # Logspout
    - "12201:12201/udp" # GELF
    environment:
      LOGSPOUT: ignore
      SERVICE_NAME: elk
      DEPLOY_ENV: ${DEPLOY_ENV}
    logging:
      driver: json-file
      options:
        max-size: 10m
    deploy:
      placement:
        constraints:
        - node.hostname == ${WORKER_NODE_3}
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 8
        delay: 15s
    volumes:
    - esdata:/var/lib/elasticsearch

  logspout:
    image: garystafford/custom-logspout:latest
    networks:
    - elk-demo
    environment:
      SERVICE_NAME: logspout
      DEPLOY_ENV: ${DEPLOY_ENV}
      ROUTE_URIS: "logstash://${ELK_IP}:5000"
      DOCKER_LABELS: "show_lables"
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    logging:
      driver: json-file
      options:
        env: SERVICE_NAME,DEPLOY_ENV
        max-size: 10m
    deploy:
      mode: global
      placement:
        constraints:
        - node.role == worker
        - node.hostname != ${WORKER_NODE_3}
      restart_policy:
        condition: on-failure
        max_attempts: 8
        delay: 15s

  fluentd:
    image: garystafford/custom-fluentd:latest
    ports:
    - "24224:24224/tcp" # receive the event stream
    - "24224:24224/udp" # receive heartbeat messages
    networks:
    - elk-demo
    logging:
      driver: json-file
      options:
        max-size: 10m
    deploy:
      mode: global
      placement:
        constraints:
        - node.role == worker
        - node.hostname != ${WORKER_NODE_3}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 8
        delay: 15s
    environment:
      LOGSPOUT: ignore
      SERVICE_NAME: fluentd
      DEPLOY_ENV: ${DEPLOY_ENV}

  nginx:
    image: garystafford/custom-nginx:latest
    ports:
    - "80:80/tcp"
    networks:
    - elk-demo
    logging:
      driver: json-file
      options:
        env: SERVICE_NAME,DEPLOY_ENV
        max-size: 10m
    environment:
      SERVICE_NAME: nginx
      DEPLOY_ENV: ${DEPLOY_ENV}
    deploy:
      placement:
        constraints:
        - node.role == worker
        - node.hostname != ${WORKER_NODE_3}
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s

  hello-gelf:
    image: garystafford/hello-world:latest
    networks:
    - elk-demo
    logging:
      driver: gelf
      options:
        gelf-address: "udp://${ELK_IP}:12201"
        tag: docker.{{.Name}}
        env: SERVICE_NAME,DEPLOY_ENV
    deploy:
      placement:
        constraints:
        - node.role == worker
        - node.hostname != ${WORKER_NODE_3}
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
    environment:
      LOGSPOUT: ignore
      SERVICE_NAME: hello-gelf
      DEPLOY_ENV: ${DEPLOY_ENV}
    command: "java \
      -Dspring.profiles.active=${DEPLOY_ENV} \
      -Djava.security.egd=file:/dev/./urandom \
      -jar hello-world.jar"

  hello-fluentd:
    image: garystafford/hello-world:latest
    networks:
    - elk-demo
    logging:
      driver: fluentd
      options:
        tag: docker.{{.Name}}
        env: SERVICE_NAME,DEPLOY_ENV
    deploy:
      placement:
        constraints:
        - node.role == worker
        - node.hostname != ${WORKER_NODE_3}
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
    environment:
      SERVICE_NAME: hello-fluentd
      DEPLOY_ENV: ${DEPLOY_ENV}
      LOGSPOUT: ignore
    command: "java \
      -Dspring.profiles.active=${DEPLOY_ENV} \
      -Djava.security.egd=file:/dev/./urandom \
      -jar hello-world.jar"

  hello-logspout:
    image: garystafford/hello-world:latest
    networks:
    - elk-demo
    logging:
      driver: json-file
      options:
        env: SERVICE_NAME,DEPLOY_ENV
        max-size: 10m
    deploy:
      placement:
        constraints:
        - node.role == worker
        - node.hostname != ${WORKER_NODE_3}
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
    environment:
      SERVICE_NAME: hello-logspout
      DEPLOY_ENV: ${DEPLOY_ENV}
    command: "java \
      -Dspring.profiles.active=${DEPLOY_ENV} \
      -Djava.security.egd=file:/dev/./urandom \
      -jar hello-world.jar"

  # visualizer:
  #   image: dockersamples/visualizer:latest
  #   ports:
  #   - "8400:8080/tcp"
  #   networks:
  #   - elk-demo
  #   volumes:
  #   - /var/run/docker.sock:/var/run/docker.sock
  #   logging:
  #     driver: json-file
  #     options:
  #       env: SERVICE_NAME,DEPLOY_ENV
  #       max-size: 10m
  #   environment:
  #     SERVICE_NAME: visualizer
  #     DEPLOY_ENV: ${DEPLOY_ENV}
  #   deploy:
  #     mode: global
  #     placement:
  #       constraints:
  #       - node.role == manager
  #     update_config:
  #       parallelism: 1
  #       delay: 10s
  #     restart_policy:
  #       condition: on-failure
  #       max_attempts: 3
  #       delay: 5s

  portainer:
    image: portainer/portainer:latest
    ports:
    - "9000:9000/tcp"
    networks:
    - elk-demo
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    logging:
      driver: json-file
      options:
        env: SERVICE_NAME,DEPLOY_ENV
        max-size: 10m
    environment:
      SERVICE_NAME: visualizer
      DEPLOY_ENV: ${DEPLOY_ENV}
    deploy:
      mode: global
      placement:
        constraints:
        - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s

volumes:
  esdata:

networks:
  elk-demo:
    driver: overlay
